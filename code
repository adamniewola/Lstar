procedure Lstar(G,Ns,Ng,dg,h,w,dgmin) //G - graph, Ns - start, Ng - goal, h - heuristic cost function, dg - edge cost function, w - Lstar coefficient, dgmin - min increase of the dg cost
      compute f0=h(Ns) and df, initialize open list – table of sublists (OL)
      put Ns to the first sublist of the open list OL(1) with f=wh(Ns), put Ns into tree T
      pathExist = false
      subList = 1
      while OL is not empty
            for every node from the current sublist OL(subList) 
                  get the first node from the current sublist N=OL(subList), delete N from the sublist
                  if N = Ng then
                        pathExist = true
                        goto label A
                  end if
                  for every N’ adjacent to N
                        if N’ is not marked ‘visited’ then
                              add N’ to T with a pointer toward N		
                              f(N’)=g(N)+dg(N,N’)+wh(N’)
                              SL=floor(f(N’)-f0)/df)+1
                              insert N’ to the first position of the sublist OL(SL) and mark N’‘visited’ 
                        else 
                              if g(N)+dg(N,N’) < g(N’) then 
                                    modify T by redirecting pointer of N’ toward N	
                                    f(N’)=g(N)+dg(N,N’)+wh(N’)
                                    SL=floor(f(N’)-f0)/df)+1
                                    delete N’ from the previous open sublist
                                    insert N’ to the first position of the sublist OL(SL) 
                              end if
                        end if
                  end for
            end for
            subList++
      end while
      label A
      if pathExist = true then
            return reconstructed path by tracing the pointers from Ng to Ns
      else
            return failure
      end if 
end procedure
